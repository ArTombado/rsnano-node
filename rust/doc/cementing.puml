@startuml "Confirmation Height"
class BlockCementer{
    process(block, callbacks)
}

class CementationThread{
    add(block)
    run(mode)
}

package "Infrastructure" {
    class Ledger
}

package "Logic"{
    class CementationQueue

    class WriteBatchSlicer {
        next_slice(): BlockChainSection
    }
    class MultiAccountCementer {
        enqueue(write_details)
        cement_next(data_requester): BlockChainSection
    }
    class BatchWriteSizeManager {
        current()
    }

    interface LedgerDataRequester{
        get_block(hash)
        was_block_pruned(hash)
        get_confirmation_height(account)
        get_account_info(account)
        refresh_transaction()
    }

    struct CementationStep{
        is_done
        already_cemented
        cement
    }

    class BoundedModeHelper{
        initialize(hash)
        get_next_step()
    }

}

package "Values"{
    struct BlockChainSection{
        account
        bottom_height
        bottom_hash
        top_height
        top_hash
    }
}

package "Application"{
    class LedgerAdapter
}

Ledger ..> BlockChainSection

BlockCementer --> Ledger
BlockCementer --> MultiAccountCementer
BlockCementer --> BatchWriteSizeManager
BlockCementer --> LedgerAdapter
BlockCementer --> BoundedModeHelper

BoundedModeHelper --> CementationStep: creates
BoundedModeHelper --> LedgerDataRequester

CementationStep --> BlockChainSection

MultiAccountCementer --> WriteBatchSlicer
MultiAccountCementer --> BatchWriteSizeManager
MultiAccountCementer --> CementationQueue
MultiAccountCementer --> LedgerDataRequester

WriteBatchSlicer --> BlockChainSection: creates

CementationQueue --> BlockChainSection

CementationThread --> BlockCementer

LedgerAdapter ..|> LedgerDataRequester
LedgerAdapter --> Ledger

@enduml