@startuml "Confirmation Height"

package "Infrastructure" {
    class Ledger
}

package "Logic"{

    class WriteBatcher {
        enqueue(section)
        next_write(data_requester): BlockChainSection
        is_done()
    }

    class BatchWriteSizeManager {
        current()
    }

    interface LedgerDataRequester{
        get_block(hash)
        was_block_pruned(hash)
        get_confirmation_height(account)
        get_account_info(account)
        refresh_transaction()
    }

    struct CementationStep{
        is_done
        already_cemented
        cement
    }

    class CementationWalker{
        initialize(hash)
        next_cementation()
    }

}

package "Values"{
    struct BlockChainSection{
        account
        bottom_height
        bottom_hash
        top_height
        top_hash
    }
}

package "Application"{
    class CementationThread{
        add(block)
        run(mode)
    }

    class BlockCementer{
        process(block, callbacks)
    }

    class LedgerAdapter
}

Ledger ..> BlockChainSection

BlockCementer --> Ledger
BlockCementer --> WriteBatcher
BlockCementer --> BatchWriteSizeManager
BlockCementer --> LedgerAdapter
BlockCementer --> CementationWalker

CementationWalker --> CementationStep: creates
CementationWalker --> LedgerDataRequester

CementationStep --> BlockChainSection

WriteBatcher --> BatchWriteSizeManager
WriteBatcher --> LedgerDataRequester
WriteBatcher --> BlockChainSection: creates

CementationThread --> BlockCementer

LedgerAdapter ..|> LedgerDataRequester
LedgerAdapter --> Ledger

@enduml