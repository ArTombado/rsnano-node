#ifndef rs_nano_bindings_hpp
#define rs_nano_bindings_hpp

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <new>
#include <ostream>

namespace rsnano
{
struct BandwidthLimiterHandle;

struct ChangeBlockHandle;

struct OpenBlockHandle;

struct ReceiveBlockHandle;

struct SendBlockHandle;

struct StateBlockHandle;

struct BlockDetailsDto
{
	uint8_t epoch;
	bool is_send;
	bool is_receive;
	bool is_epoch;
};

struct BlockSidebandDto
{
	uint64_t height;
	uint64_t timestamp;
	uint8_t successor[32];
	uint8_t account[32];
	uint8_t balance[16];
	BlockDetailsDto details;
	uint8_t source_epoch;
};

using Blake2BFinalCallback = int32_t (*) (void *, void *, uintptr_t);

using Blake2BInitCallback = int32_t (*) (void *, uintptr_t);

using Blake2BUpdateCallback = int32_t (*) (void *, const void *, uintptr_t);

using PropertyTreeGetStringCallback = int32_t (*) (const void *, const char *, uintptr_t, char *, uintptr_t);

using PropertyTreePutStringCallback = void (*) (void *, const char *, uintptr_t, const char *, uintptr_t);

using ReadBytesCallback = int32_t (*) (void *, uint8_t *, uintptr_t);

using ReadU8Callback = int32_t (*) (void *, uint8_t *);

using WriteBytesCallback = int32_t (*) (void *, const uint8_t *, uintptr_t);

using WriteU8Callback = int32_t (*) (void *, uint8_t);

struct ChangeBlockDto
{
	uint64_t work;
	uint8_t signature[64];
	uint8_t previous[32];
	uint8_t representative[32];
};

struct ChangeBlockDto2
{
	uint8_t previous[32];
	uint8_t representative[32];
	uint8_t priv_key[32];
	uint8_t pub_key[32];
	uint64_t work;
};

struct OpenBlockDto
{
	uint64_t work;
	uint8_t signature[64];
	uint8_t source[32];
	uint8_t representative[32];
	uint8_t account[32];
};

struct OpenBlockDto2
{
	uint8_t source[32];
	uint8_t representative[32];
	uint8_t account[32];
	uint8_t priv_key[32];
	uint8_t pub_key[32];
	uint64_t work;
};

struct ReceiveBlockDto
{
	uint64_t work;
	uint8_t signature[64];
	uint8_t previous[32];
	uint8_t source[32];
};

struct ReceiveBlockDto2
{
	uint8_t previous[32];
	uint8_t source[32];
	uint8_t priv_key[32];
	uint8_t pub_key[32];
	uint64_t work;
};

struct SendBlockDto
{
	uint8_t previous[32];
	uint8_t destination[32];
	uint8_t balance[16];
	uint8_t signature[64];
	uint64_t work;
};

struct SendBlockDto2
{
	uint8_t previous[32];
	uint8_t destination[32];
	uint8_t balance[16];
	uint8_t priv_key[32];
	uint8_t pub_key[32];
	uint64_t work;
};

struct StateBlockDto
{
	uint8_t signature[64];
	uint8_t account[32];
	uint8_t previous[32];
	uint8_t representative[32];
	uint8_t link[32];
	uint8_t balance[16];
	uint64_t work;
};

struct StateBlockDto2
{
	uint8_t account[32];
	uint8_t previous[32];
	uint8_t representative[32];
	uint8_t link[32];
	uint8_t balance[16];
	uint8_t priv_key[32];
	uint8_t pub_key[32];
	uint64_t work;
};

struct WorkThresholdsDto
{
	uint64_t epoch_1;
	uint64_t epoch_2;
	uint64_t epoch_2_receive;
	uint64_t base;
	uint64_t entry;
};

extern "C" {

int32_t rsn_account_decode (const char * input, uint8_t (*result)[32]);

void rsn_account_encode (const uint8_t (*bytes)[32], uint8_t (*result)[65]);

BandwidthLimiterHandle * rsn_bandwidth_limiter_create (double limit_burst_ratio, uintptr_t limit);

void rsn_bandwidth_limiter_destroy (BandwidthLimiterHandle * limiter);

int32_t rsn_bandwidth_limiter_reset (const BandwidthLimiterHandle * limiter,
double limit_burst_ratio,
uintptr_t limit);

bool rsn_bandwidth_limiter_should_drop (const BandwidthLimiterHandle * limiter,
uintptr_t message_size,
int32_t * result);

int32_t rsn_block_details_create (uint8_t epoch,
bool is_send,
bool is_receive,
bool is_epoch,
BlockDetailsDto * result);

int32_t rsn_block_details_deserialize (BlockDetailsDto * dto, void * stream);

int32_t rsn_block_details_serialize (const BlockDetailsDto * dto, void * stream);

uintptr_t rsn_block_serialized_size (uint8_t block_type);

int32_t rsn_block_sideband_deserialize (BlockSidebandDto * dto, void * stream, uint8_t block_type);

int32_t rsn_block_sideband_serialize (const BlockSidebandDto * dto, void * stream, uint8_t block_type);

uintptr_t rsn_block_sideband_size (uint8_t block_type, int32_t * result);

void rsn_callback_blake2b_final (Blake2BFinalCallback f);

void rsn_callback_blake2b_init (Blake2BInitCallback f);

void rsn_callback_blake2b_update (Blake2BUpdateCallback f);

void rsn_callback_property_tree_get_string (PropertyTreeGetStringCallback f);

void rsn_callback_property_tree_put_string (PropertyTreePutStringCallback f);

void rsn_callback_read_bytes (ReadBytesCallback f);

void rsn_callback_read_u8 (ReadU8Callback f);

void rsn_callback_write_bytes (WriteBytesCallback f);

void rsn_callback_write_u8 (WriteU8Callback f);

ChangeBlockHandle * rsn_change_block_clone (const ChangeBlockHandle * handle);

ChangeBlockHandle * rsn_change_block_create (const ChangeBlockDto * dto);

ChangeBlockHandle * rsn_change_block_create2 (const ChangeBlockDto2 * dto);

ChangeBlockHandle * rsn_change_block_deserialize (void * stream);

ChangeBlockHandle * rsn_change_block_deserialize_json (const void * ptree);

void rsn_change_block_destroy (ChangeBlockHandle * handle);

bool rsn_change_block_equals (const ChangeBlockHandle * a, const ChangeBlockHandle * b);

void rsn_change_block_hash (const ChangeBlockHandle * handle, uint8_t (*hash)[32]);

void rsn_change_block_previous (const ChangeBlockHandle * handle, uint8_t (*result)[32]);

void rsn_change_block_previous_set (ChangeBlockHandle * handle, const uint8_t (*source)[32]);

void rsn_change_block_representative (const ChangeBlockHandle * handle, uint8_t (*result)[32]);

void rsn_change_block_representative_set (ChangeBlockHandle * handle,
const uint8_t (*representative)[32]);

int32_t rsn_change_block_serialize (ChangeBlockHandle * handle, void * stream);

int32_t rsn_change_block_serialize_json (const ChangeBlockHandle * handle, void * ptree);

void rsn_change_block_signature (const ChangeBlockHandle * handle, uint8_t (*result)[64]);

void rsn_change_block_signature_set (ChangeBlockHandle * handle, const uint8_t (*signature)[64]);

uintptr_t rsn_change_block_size ();

uint64_t rsn_change_block_work (const ChangeBlockHandle * handle);

void rsn_change_block_work_set (ChangeBlockHandle * handle, uint64_t work);

void rsn_open_block_account (const OpenBlockHandle * handle, uint8_t (*result)[32]);

void rsn_open_block_account_set (OpenBlockHandle * handle, const uint8_t (*account)[32]);

OpenBlockHandle * rsn_open_block_clone (const OpenBlockHandle * handle);

OpenBlockHandle * rsn_open_block_create (const OpenBlockDto * dto);

OpenBlockHandle * rsn_open_block_create2 (const OpenBlockDto2 * dto);

OpenBlockHandle * rsn_open_block_deserialize (void * stream);

OpenBlockHandle * rsn_open_block_deserialize_json (const void * ptree);

void rsn_open_block_destroy (OpenBlockHandle * handle);

bool rsn_open_block_equals (const OpenBlockHandle * a, const OpenBlockHandle * b);

void rsn_open_block_hash (const OpenBlockHandle * handle, uint8_t (*hash)[32]);

void rsn_open_block_representative (const OpenBlockHandle * handle, uint8_t (*result)[32]);

void rsn_open_block_representative_set (OpenBlockHandle * handle,
const uint8_t (*representative)[32]);

int32_t rsn_open_block_serialize (OpenBlockHandle * handle, void * stream);

int32_t rsn_open_block_serialize_json (const OpenBlockHandle * handle, void * ptree);

void rsn_open_block_signature (const OpenBlockHandle * handle, uint8_t (*result)[64]);

void rsn_open_block_signature_set (OpenBlockHandle * handle, const uint8_t (*signature)[64]);

uintptr_t rsn_open_block_size ();

void rsn_open_block_source (const OpenBlockHandle * handle, uint8_t (*result)[32]);

void rsn_open_block_source_set (OpenBlockHandle * handle, const uint8_t (*source)[32]);

uint64_t rsn_open_block_work (const OpenBlockHandle * handle);

void rsn_open_block_work_set (OpenBlockHandle * handle, uint64_t work);

ReceiveBlockHandle * rsn_receive_block_clone (const ReceiveBlockHandle * handle);

ReceiveBlockHandle * rsn_receive_block_create (const ReceiveBlockDto * dto);

ReceiveBlockHandle * rsn_receive_block_create2 (const ReceiveBlockDto2 * dto);

ReceiveBlockHandle * rsn_receive_block_deserialize (void * stream);

ReceiveBlockHandle * rsn_receive_block_deserialize_json (const void * ptree);

void rsn_receive_block_destroy (ReceiveBlockHandle * handle);

bool rsn_receive_block_equals (const ReceiveBlockHandle * a, const ReceiveBlockHandle * b);

void rsn_receive_block_hash (const ReceiveBlockHandle * handle, uint8_t (*hash)[32]);

void rsn_receive_block_previous (const ReceiveBlockHandle * handle, uint8_t (*result)[32]);

void rsn_receive_block_previous_set (ReceiveBlockHandle * handle, const uint8_t (*previous)[32]);

int32_t rsn_receive_block_serialize (ReceiveBlockHandle * handle, void * stream);

int32_t rsn_receive_block_serialize_json (const ReceiveBlockHandle * handle, void * ptree);

void rsn_receive_block_signature (const ReceiveBlockHandle * handle, uint8_t (*result)[64]);

void rsn_receive_block_signature_set (ReceiveBlockHandle * handle, const uint8_t (*signature)[64]);

uintptr_t rsn_receive_block_size ();

void rsn_receive_block_source (const ReceiveBlockHandle * handle, uint8_t (*result)[32]);

void rsn_receive_block_source_set (ReceiveBlockHandle * handle, const uint8_t (*previous)[32]);

uint64_t rsn_receive_block_work (const ReceiveBlockHandle * handle);

void rsn_receive_block_work_set (ReceiveBlockHandle * handle, uint64_t work);

void rsn_send_block_balance (const SendBlockHandle * handle, uint8_t (*result)[16]);

void rsn_send_block_balance_set (SendBlockHandle * handle, const uint8_t (*balance)[16]);

SendBlockHandle * rsn_send_block_clone (const SendBlockHandle * handle);

SendBlockHandle * rsn_send_block_create (const SendBlockDto * dto);

SendBlockHandle * rsn_send_block_create2 (const SendBlockDto2 * dto);

SendBlockHandle * rsn_send_block_deserialize (void * stream);

SendBlockHandle * rsn_send_block_deserialize_json (const void * ptree);

void rsn_send_block_destination (const SendBlockHandle * handle, uint8_t (*result)[32]);

void rsn_send_block_destination_set (SendBlockHandle * handle, const uint8_t (*destination)[32]);

void rsn_send_block_destroy (SendBlockHandle * handle);

bool rsn_send_block_equals (const SendBlockHandle * a, const SendBlockHandle * b);

void rsn_send_block_hash (const SendBlockHandle * handle, uint8_t (*hash)[32]);

void rsn_send_block_previous (const SendBlockHandle * handle, uint8_t (*result)[32]);

void rsn_send_block_previous_set (SendBlockHandle * handle, const uint8_t (*previous)[32]);

int32_t rsn_send_block_serialize (SendBlockHandle * handle, void * stream);

int32_t rsn_send_block_serialize_json (const SendBlockHandle * handle, void * ptree);

void rsn_send_block_signature (const SendBlockHandle * handle, uint8_t (*result)[64]);

void rsn_send_block_signature_set (SendBlockHandle * handle, const uint8_t (*signature)[64]);

uintptr_t rsn_send_block_size ();

bool rsn_send_block_valid_predecessor (uint8_t block_type);

uint64_t rsn_send_block_work (const SendBlockHandle * handle);

void rsn_send_block_work_set (SendBlockHandle * handle, uint64_t work);

void rsn_send_block_zero (SendBlockHandle * handle);

int32_t rsn_sign_message (const uint8_t (*priv_key)[32],
const uint8_t (*pub_key)[32],
const uint8_t * message,
uintptr_t len,
uint8_t (*signature)[64]);

void rsn_state_block_account (const StateBlockHandle * handle, uint8_t (*result)[32]);

void rsn_state_block_account_set (StateBlockHandle * handle, const uint8_t (*source)[32]);

void rsn_state_block_balance (const StateBlockHandle * handle, uint8_t (*result)[16]);

void rsn_state_block_balance_set (StateBlockHandle * handle, const uint8_t (*balance)[16]);

StateBlockHandle * rsn_state_block_clone (const StateBlockHandle * handle);

StateBlockHandle * rsn_state_block_create (const StateBlockDto * dto);

StateBlockHandle * rsn_state_block_create2 (const StateBlockDto2 * dto);

StateBlockHandle * rsn_state_block_deserialize (void * stream);

StateBlockHandle * rsn_state_block_deserialize_json (const void * ptree);

void rsn_state_block_destroy (StateBlockHandle * handle);

bool rsn_state_block_equals (const StateBlockHandle * a, const StateBlockHandle * b);

void rsn_state_block_hash (const StateBlockHandle * handle, uint8_t (*hash)[32]);

void rsn_state_block_link (const StateBlockHandle * handle, uint8_t (*result)[32]);

void rsn_state_block_link_set (StateBlockHandle * handle, const uint8_t (*link)[32]);

void rsn_state_block_previous (const StateBlockHandle * handle, uint8_t (*result)[32]);

void rsn_state_block_previous_set (StateBlockHandle * handle, const uint8_t (*source)[32]);

void rsn_state_block_representative (const StateBlockHandle * handle, uint8_t (*result)[32]);

void rsn_state_block_representative_set (StateBlockHandle * handle,
const uint8_t (*representative)[32]);

int32_t rsn_state_block_serialize (StateBlockHandle * handle, void * stream);

int32_t rsn_state_block_serialize_json (const StateBlockHandle * handle, void * ptree);

void rsn_state_block_signature (const StateBlockHandle * handle, uint8_t (*result)[64]);

void rsn_state_block_signature_set (StateBlockHandle * handle, const uint8_t (*signature)[64]);

uintptr_t rsn_state_block_size ();

uint64_t rsn_state_block_work (const StateBlockHandle * handle);

void rsn_state_block_work_set (StateBlockHandle * handle, uint64_t work);

bool rsn_valdiate_message (const uint8_t (*pub_key)[32],
const uint8_t * message,
uintptr_t len,
const uint8_t (*signature)[64]);

void rsn_work_thresholds_create (WorkThresholdsDto * dto,
uint64_t epoch_1,
uint64_t epoch_2,
uint64_t epoch_2_receive);

double rsn_work_thresholds_denormalized_multiplier (const WorkThresholdsDto * dto,
double multiplier,
uint64_t threshold);

uint64_t rsn_work_thresholds_difficulty (const WorkThresholdsDto * dto,
uint8_t work_version,
const uint8_t (*root)[32],
uint64_t work);

double rsn_work_thresholds_normalized_multiplier (const WorkThresholdsDto * dto,
double multiplier,
uint64_t threshold);

void rsn_work_thresholds_publish_beta (WorkThresholdsDto * dto);

void rsn_work_thresholds_publish_dev (WorkThresholdsDto * dto);

void rsn_work_thresholds_publish_full (WorkThresholdsDto * dto);

void rsn_work_thresholds_publish_test (WorkThresholdsDto * dto);

uint64_t rsn_work_thresholds_threshold (const WorkThresholdsDto * dto,
const BlockDetailsDto * details);

uint64_t rsn_work_thresholds_threshold2 (const WorkThresholdsDto * dto,
uint8_t work_version,
const BlockDetailsDto * details);

uint64_t rsn_work_thresholds_threshold_base (const WorkThresholdsDto * dto, uint8_t work_version);

uint64_t rsn_work_thresholds_threshold_entry (const WorkThresholdsDto * dto,
uint8_t work_version,
uint8_t block_type);

bool rsn_work_thresholds_validate_entry (const WorkThresholdsDto * dto,
uint8_t work_version,
const uint8_t (*root)[32],
uint64_t work);

uint64_t rsn_work_thresholds_value (const WorkThresholdsDto * dto,
const uint8_t (*root)[32],
uint64_t work);

} // extern "C"

} // namespace rsnano

#endif // rs_nano_bindings_hpp
